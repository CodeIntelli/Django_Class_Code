DJANGO TUTORIAL COMMING SOON

AFTER INSTALLING DJANGO FIRST FOR CREATE PROJECT YOU MUST HAVE TO USE 
    PIP INSTALL DJANGO
AFTER INSTALL CHECK VERSION OF DJANGO USING THIS COMMAND
    python -m django --version
AFTER THAT FOR CREATING A PROJECT YOU NEED TO WRITE THIS COMMAND
    DJANGO-ADMIN STARTPROJECT <DJANGO PROJECT NAME>


FOLDER STRUCTURE

[ ] MAIN FOLDER IN WHICH YOU CAN WRITE <DJANGO PROJECT NAME> HAVE CREATE THE MAIN FOLDER OF <DJANGO PROJECT NAME> THIS NAME AND YOU CAN CHANGE OUTER FOLDER NAME 

[ ] SIMILARTY FOLDER NAME THAT WE HAVE GIVEN <DJANGO PROJECT NAME> WILL BE SAME FOLDER CREATED IN <DJANGO PROJECT NAME>/<DJANGO PROJECT NAME> AND THIS WILL BE YOUR INNER FOLDER AND YOU CAN'T CHANGE NAME OF THIS FOLDER UNDERTHIS WE HAVE THREE FILE AND OUTER THIS WE HAVE ONE FILE AND

INNER FILE
    1. __init__.py:-
        * This file is generated by Django for us. It is mandatory to have an __inti__.py file in a directory to denote that the project is a python package and can be imported into other files. This file usually remains empty.
        * If this file gets missing, you will see “package not found error” in the absence of this file.
    2. setting.py:- 
        * This is the core file of our Django projects.
        * It contains the configuration values which are needed by web apps to work properly such as database settings, static files location, template location, etc. We will keep coming to this file to edit the project configuration throughout this course.
    3. urls.py:-
        * Url declaration and mapping are made under this file.
    4. wsgi.py:-
        * WSGI stands for web-server gateway interface.
        * WSGI is a specification that describes the communication between a web server and a web application.
        
outer file:
    1. manage.py:- 
    * Command-line utility for performing administrative tasks.
    * We will be using manage.py frequently while developing a Django project.


FOR USING VIEWS WE HAVE TO CREATE VIEWS.PY AND IMPORT IT INTO URLS.PY FOR PROVIDING UI AND AFTER THAT FOR DISPLAY ANY TEXT OR HELLO WORLD IN HOME PAGE CREATE A FUNCTION LIKE
def index(request):
     return HttpResponse('''hello shiva mahadev \n <a href="https://google.com">Google</a>''')

AND THEN CALL THIS FUNCTION IN URLS.PY
urlpatterns = [
     path('admin/', admin.site.urls),
     path('', views.index, name='home'),
 ]



NOW FOR USING HTML WE HAVE TO INTRODUCE DJANGO.shortcuts IN WHICH WE CAN IMPORT RENDER METHOD THAT DISPLAY THE COMPLETE HTML FILE BUT BEFORE USING HTML FILE WE MUST HAVE CREATE TEMPLATE FOLDER ON BASE DIRECTORY AND THAT BASE DIRECTORY NAME WILL BE DECLARED IN SETTINGS.PY IN TEMPLATE LIST AND IN THAT YOU HAVE TO ENTER THE NAME OF DIRECTORY IN DIRS FIELD 



AND IF YOU WANT TO SEND ANY DATA USING DJANGO VIEW TO HTML FILE YOU MUST USE 
{{}} IN HTML FILE TO CALL A VARIABLE 
EX.
VIEWS.PY
from django.http import HttpResponse
from django.shortcuts import render

def index(request):
    params={'name':'shiva','place':'kailash'}
    return render(request,'index.html',params)


INDEX.HTML
<body>
    <h1>We Are Running Html File in Django</h1>

    <p>Name :- {{name}}</p>
    <p>Place:- {{place}}</p>
  </body>




PYTHON MANAGE.PY MAKEMIGRATION CHECK IF ANY CHANGES OCCUR IN DATABASE LIKE NEW TABLE INSERTED OR NEW QUERY INSERTED OR MORE THEN AFTER FIRST TIME WE CAN MIGRATE OUR DATABASE BUT AFTER CHANGES HAS DETECTED IN MIGRATION THEN WE ALWAYS HAVE TO CHANGE MAKEMIGRATION AND THEN MIGRATE IT

after that you have to create super user that access the admin panel




$$ makemigration:- make migration and store in a file
$$ migrate:- apply the pending changes created by makemigration and generate a file 

""" 
1. you have to create a model in which you have to declare field of that model
eg. class TableName(models.Model):
    !field = models.datatype(length,default,helptext,null=true/false,blank=true/false)
after creating it register it into Home.admin
    !from Home.models import Contact
    # Register your models here.
    !admin.site.register(Contact)
after that go to apps.py and take HomeConfig and paste into project folder and go to setting and then paste it into "installed Apps"

!'Home.apps.HomeConfig',

migrate it using makemigration and then migrate it 

 """





 now if you want to show message to user after adding data Successfully you need to search django message framework then go to setting and put this line in setting.py
 
* from django.contrib.messages import constants as messages

then go to views.py in which function you want to see the message put the line at that part 


[ ]messages.success(request, 'Your Message Has Been Send Successfully!')

now go to html file where you want to display message 

[ ] code 
{% if messages %}
  {% for message in messages %}
<div class="alert alert-{{ message.tags }} alert-dismissible fade show my-0" role="alert">
  <strong>{{ message }}</strong> 
  <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>
{% endfor %}
{% endif %}










